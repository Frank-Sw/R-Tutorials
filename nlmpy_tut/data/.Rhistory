return(new_state)
}
state.transition(test_grid,1,1)
x
x = 4
y = 7
paste(sort(get.moorneigxhbors.vector(grid, x,y)), collapse = "")
paste(sort(get.moorneighbors.vector(grid, x,y)), collapse = "")
ca_grid <- test_grid
paste(sort(get.moorneighbors.vector(ca_grid, x,y)), collapse = "")
neighbors <- paste(sort(get.moorneighbors.vector(ca_grid, x,y)), collapse = "")
new_state <- full_neighborconf_frame[which(full_neighborconf_frame == neighbors),2]
state.transition <- function(ca_grid,x,y){
neighbors <- paste(sort(get.moorneighbors.vector(ca_grid, x,y)), collapse = "")
new_state <- full_neighborconf_frame[which(full_neighborconf_frame == neighbors),2]
return(new_state)
}
state.transition(test_grid,1,1)
full_neighborconf_frame
state.transition <- function(j,x,y){
neighbors <- paste(sort(get.moorneighbors.vector(j, x,y)), collapse = "")
new_state <- full_neighborconf_frame[which(full_neighborconf_frame == neighbors),2]
return(new_state)
}
state.transition(test_grid,1,1)
state.transition(test_grid,1,1)
neighbors <- paste(sort(get.moorneighbors.vector(j, x,y)), collapse = "")
new_state <- full_neighborconf_frame[which(full_neighborconf_frame == neighbors),2]
state.transition <- function(j,x,y){
ca_grid   <- j
neighbors <- paste(sort(get.moorneighbors.vector(j, x, y)), collapse = "")
new_state <- full_neighborconf_frame[which(full_neighborconf_frame == neighbors),2]
return(new_state)
}
state.transition(test_grid,1,1)
j <- test_grid
test_grid[1,1]
View(test_grid)
sort(get.moorneighbors.vector(ca_grid, x, y))
state.transition(test_grid,1,1)
state.transition <- function(j,x,y){
ca_grid   <- j
neighbors <- paste(sort(get.moorneighbors.vector(ca_grid, x, y)), collapse = "")
new_state <- full_neighborconf_frame[which(full_neighborconf_frame == neighbors),2]
return(new_state)
}
state.transition(test_grid,1,1)
ca_grid   <- j
neighbors <- paste(sort(get.moorneighbors.vector(ca_grid, x, y)), collapse = "")
new_state <- full_neighborconf_frame[which(full_neighborconf_frame == neighbors),2]
new_state
state.transition <- function(d, x, y){
neighbors <- paste(sort(get.moorneighbors.vector(d, x, y)), collapse = "")
new_state <- full_neighborconf_frame[which(full_neighborconf_frame == neighbors),2]
return(new_state)
}
state.transition(test_grid, 1, 1)
state.transition(test_grid, 10, 10)
state.transition(test_grid, 1, 10)
get.moorneighbors.vector(test_grid, 1, 1)
get.moorneighbors.vector <- function(d, x, y) {
# create empty vector to store neighbor states
neighbor_vector <- integer(0)
# get neighbor states that are direct neighbors
neighbor_vector[1] <- d[x-1,y-1][[1]]      # upper, left corner
neighbor_vector[2] <- d[x,y-1][[1]]       # upper, middle corner
neighbor_vector[3] <- d[x+1,y-1][[1]]     # upper, right corner
neighbor_vector[4] <- d[x-1,y][[1]]       # middle, left corner
neighbor_vector[5] <- d[x+1,y][[1]]       # middle, right corner
neighbor_vector[6] <- d[x-1,y+1][[1]]     # lower, left corner
neighbor_vector[7] <- d[x,y+1][[1]]       # lower, middle corner
neighbor_vector[8] <- d[x+1,y+1][[1]]     # lower, right corner
# return vector with 4 surrounding neighbors
return(neighbor_vector)
}
state.transition <- function(d, x, y){
neighbors <- paste(sort(get.moorneighbors.vector(d, x, y)), collapse = "")
new_state <- full_neighborconf_frame[which(full_neighborconf_frame == neighbors),2]
return(new_state)
}
state.transition(test_grid, 1, 10)
get.moorneighbors.vector(test_grid, 1, 1)
test_grid <- as_data_frame(matrix(NA, nrow = 20, ncol = 20))
for(x in 1:20){
for(y in 1:20){
test_grid[x,y] <- sample(1:3)[1]
}
}
get.Neumann.vector <- function(d, x, y) {
# create empty vector to store neighbor states
neighbor_vector <- integer(0)
# get neighbor states that are direct neighbors
neighbor_vector[2] <- d[x,y-1][[1]]       # upper, middle corner
neighbor_vector[4] <- d[x-1,y][[1]]       # middle, left corner
neighbor_vector[5] <- d[x+1,y][[1]]       # middle, right corner
neighbor_vector[7] <- d[x,y+1][[1]]       # lower, middle corner
# return vector with 4 surrounding neighbors
return(neighbor_vector)
}
get.moorneighbors.vector <- function(d, x, y) {
# create empty vector to store neighbor states
neighbor_vector <- integer(0)
# get neighbor states that are direct neighbors
neighbor_vector[1] <- d[x-1,y-1][[1]]      # upper, left corner
neighbor_vector[2] <- d[x,y-1][[1]]       # upper, middle corner
neighbor_vector[3] <- d[x+1,y-1][[1]]     # upper, right corner
neighbor_vector[4] <- d[x-1,y][[1]]       # middle, left corner
neighbor_vector[5] <- d[x+1,y][[1]]       # middle, right corner
neighbor_vector[6] <- d[x-1,y+1][[1]]     # lower, left corner
neighbor_vector[7] <- d[x,y+1][[1]]       # lower, middle corner
neighbor_vector[8] <- d[x+1,y+1][[1]]     # lower, right corner
# return vector with 4 surrounding neighbors
return(neighbor_vector)
}
full_neighborconf_frame_long <- CombSet(1:3, 8, repl=TRUE, ord=FALSE)
full_neighborconf_frame <- data.frame(NeighborConf=rep(NA,45), StateToTrans=rep(NA,45))
for(i in 1:45){
full_neighborconf_frame[i,1] <- paste(full_neighborconf_frame_long[i,], collapse = "")
}
full_neighborconf_frame[1:6,2]    <-   1
full_neighborconf_frame[7:8,2]    <- 999
full_neighborconf_frame[9:10,2]   <-   1
full_neighborconf_frame[11:21,2]  <- 999
full_neighborconf_frame[22,2]     <-   2
full_neighborconf_frame[23:27,2]  <- 999
full_neighborconf_frame[28,2]     <-   3
full_neighborconf_frame[29:30,2]  <-   2
full_neighborconf_frame[31:35,2]  <- 999
full_neighborconf_frame[36,2]     <-   3
full_neighborconf_frame[37:39,2]  <-   2
full_neighborconf_frame[40:44,2]  <- 999
full_neighborconf_frame[45,2]     <-   3
state.transition <- function(d, x, y){
neighbors <- paste(sort(get.moorneighbors.vector(d, x, y)), collapse = "")
new_state <- full_neighborconf_frame[which(full_neighborconf_frame == neighbors),2]
return(new_state)
}
state.transition(test_grid, 1, 10)
get.moorneighbors.vector(test_grid, 1, 1)
library(spatstat)
library(spatstat)
library(maptools)
library(ggplot2)
library(viridis)
library(rgdal)
library(rgdal)
library(rgeos)
library(raster)
foo = readOGR("roads_bangalore.kmz", "roads_bangalore.kml")
foo = readOGR("roads_bangalore.kmz", "roads_bangalore")
# load geodata
roads_india <- readOGR("C:/Users/Marco/PhD_Cloud/8_Data/GeoData_India/Vector/Roads_Bangalore/roads.shp",
layer = "roads"
)
north_transect_extent <- readOGR("C:/Users/Marco/PhD_Cloud/8_Data/GeoData_India/Vector/Worldview3_Extent/worldview_3_n_extent.shp",
layer = "worldview_3_n_extent"
)
# reproject geodata
roads_india <- spTransform(roads_india, CRS('+proj=utm +zone=43 +datum=WGS84 +units=m +no_defs'))
north_transect_extent <- spTransform(north_transect_extent, CRS('+proj=utm +zone=43 +datum=WGS84 +units=m +no_defs'))
# clip roadnetwork to the extent of the northern transect
roads_bangalore <- gIntersection(north_transect_extent, roads_india, byid = TRUE, drop_lower_td = TRUE)
KML(roads_bangalore, "roads_bangalore.kml")
roads_bangalore = readOGR("roads_bangalore.kml", "roads_bangalore")
roads_bangalore = readOGR("roads_bangalore.kml", "roads_bangalore.kml")
roads_bangalore = readOGR("roads_bangalore.kml", "root_doc")
roads_bangalore = readOGR("roads_bangalore.kml", "id")
library(rgdal)
library(rgeos)
library(raster)
# load geodata
roads_india <- readOGR("C:/Users/Marco/PhD_Cloud/8_Data/GeoData_India/Vector/Roads_Bangalore/roads.shp",
layer = "roads"
)
roads_bangalore <- readLines("roads_bangalore.kml")
roads_bangalore <- readLines("roads_bangalore.kml")
roads_bangalore = readOGR("roads_bangalore.kml", "_S4_object_of_class_structure__SpatialLinesDataFrame___package____sp___"")
roads_bangalore = readOGR("roads_bangalore.kml", "_S4_object_of_class_structure__SpatialLinesDataFrame___package____sp___")
roads_bangalore = readOGR("roads_bangalore.kml", layer= "_S4_object_of_class_structure__SpatialLinesDataFrame___package____sp___")
roads_bangalore_psp <- as.psp(roads_bangalore)
roads_bangalore_psp <- as.psp(roads_bangalore)
roads_bangalore_px <- pixellate(roads_bangalore_psp, eps = 50)
plot(pixellate(roads_bangalore_psp, eps = 50))
roadintensity_bangalore_raster <- raster(roads_bangalore_px)
gplot(roadintensity_bangalore_raster) + geom_tile(aes(fill = value)) +
coord_equal() +
scale_fill_viridis()
library(rasterVis)
roadintensity_bangalore_raster <- raster(roads_bangalore_px)
gplot(roadintensity_bangalore_raster) + geom_tile(aes(fill = value)) +
coord_equal() +
scale_fill_viridis()
plot(pixellate(roads_bangalore_psp, eps = 50))
roads_bangalore
plot(roads_bangalore)
roads_india <- readOGR("C:/Users/Marco/PhD_Cloud/8_Data/GeoData_India/Vector/Roads_Bangalore/roads.shp",
layer = "roads"
)
north_transect_extent <- readOGR("C:/Users/Marco/PhD_Cloud/8_Data/GeoData_India/Vector/Worldview3_Extent/worldview_3_n_extent.shp",
layer = "worldview_3_n_extent"
)
# reproject geodata
roads_india <- spTransform(roads_india, CRS('+proj=utm +zone=43 +datum=WGS84 +units=m +no_defs'))
north_transect_extent <- spTransform(north_transect_extent, CRS('+proj=utm +zone=43 +datum=WGS84 +units=m +no_defs'))
# clip roadnetwork to the extent of the northern transect
roads_bangalore <- gIntersection(north_transect_extent, roads_india, byid = TRUE, drop_lower_td = TRUE)
KML(roads_bangalore, "roads_bangalore.kml")
roads_india
roads_bangalore
roads_india
roads_bangalore <- as(roads_bangalore, "SpatialLinesDataFrame")
roads_bangalore
writeOGR(roads_bangalore, ".", "randompts", driver = "ESRI Shapefile", overwrite_layer = TRUE)
writeOGR(roads_bangalore, ".", "randompts", driver = "ESRI Shapefile")
roads_bangalore
plot(roads_bangalore)
roads_bangalore
writeOGR(roads_bangalore, ".")
writeOGR(roads_bangalore, ".", driver = "ESRI Shapefile")
writeOGR(roads_bangalore, "test", driver = "ESRI Shapefile")
writeOGR(roads_bangalore, ".",layer = 'roads_bangalore', driver = "ESRI Shapefile")
roads_bangalore <- as(roads_bangalore, "SpatialLines")
writeOGR(roads_bangalore, ".",layer = 'roads_bangalore', driver = "ESRI Shapefile")
writeSpatialShape(roads_bangalore, ".",layer = 'roads_bangalore', driver = "ESRI Shapefile")
writeSpatialShape(roads_bangalore, 'roads_bangalore')
roads_bangalore <- as(roads_bangalore, "SpatialLinesDataframe")
roads_bangalore <- as(roads_bangalore, "SpatialLinesDataFrame")
writeSpatialShape(roads_bangalore, 'roads_bangalore')
str(roads_bangalore)
slots(roads_bangalore)
slot(roads_bangalore)
slotNames(roads_bangalore)
roads_bangalore@data
roads_bangalore@data[,1] <- NA
roads_bangalore@data[,1]
roads_bangalore@data[,1]
roads_bangalore@data[,1]
roads_bangalore@data[,1]
roads_bangalore <- SpatialLinesDataFrame(roads_bangalore, data=data.frame(ID=1))
roads_bangalore <- gIntersection(north_transect_extent, roads_india, byid = TRUE, drop_lower_td = TRUE)
roads_bangalore <- SpatialLinesDataFrame(roads_bangalore, data=data.frame(ID=1))
roads_bangalore
roads_bangalore <- SpatialLinesDataFrame(roads_bangalore, data=data.frame(ID=rep(1, 8797))
writeSpatialShape(roads_bangalore, 'roads_bangalore')
roads_bangalore <- SpatialLinesDataFrame(roads_bangalore, data=data.frame(ID=rep(1, 8797)))
roads_bangalore <- SpatialLinesDataFrame(roads_bangalore, data=data.frame(IDlll=rep(1, 8797)))
row.names(roads_bangalore)
roads_bangalore
roads_bangalore <- SpatialLinesDataFrame(roads_bangalore, data=data.frame(matrix(0, ncol = 8797, nrow = 1)))
data.frame(matrix(0, ncol = 8797, nrow = 1))
save(roads_bangalore, 'roads_bangalore.RData')
save(roads_bangalore, file = 'roads_bangalore.RData')
roads_bangalore  <-  load("roads_bangalore.RData")
roads_bangalore  <-  load("data/roads_bangalore.RData")
roads_bangalore  <-  load("data/roads_bangalore.RData")
roads_bangalore_psp <- as.psp(roads_bangalore)
roads_bangalore
load("data/roads_bangalore.RData")
roads_bangalore_psp <- as.psp(roads_bangalore)
plot(pixellate(roads_bangalore_psp, eps = 50))
roadintensity_bangalore_raster <- raster(roads_bangalore_px)
roads_bangalore_px <- pixellate(roads_bangalore_psp, eps = 50)
plot(pixellate(roads_bangalore_psp, eps = 50))
roadintensity_bangalore_raster <- raster(roads_bangalore_px)
gplot(roadintensity_bangalore_raster) + geom_tile(aes(fill = value)) +
coord_equal() +
scale_fill_viridis()
ggsave()
ggsave(filename='roadintensity_bangalore_raster.png')
ggsave(filename='images/roadintensity_bangalore_raster.png')
ggsave(filename='images/roadintensity_bangalore_raster.png', dpi=800)
ggsave(filename='images/roadintensity_bangalore_raster.pdf', dpi=800)
ggsave(filename='images/roadintensity_bangalore_raster.pdf')
urban_grid <- matrix(NA, nrow = 1050, ncol = 100)
urban_grid[525, 50] <- 1
urban_grid
install.packages("PythonInR")
library(PythonInR)
library(PythonInR)
init_landscape <- '
os.chdir(C:/Users/Marco/PhD_Cloud/7_Code/spranGalore/data/)
import nlmpy
import numpy as np
np.random.seed(0) # So that the same NLMs are produced each time
nRow = 1050        # Number of rows
nCol = 100         # Number of columns
nlm = nlmpy.mpd (nRow, nCol, h = 0.75)
nlmpy.ex portAS CIIGrid("r aster. asc", nlm)
'
PythonInR::pyExec(code = init_landscape)
pyIsConnected()
library(PythonInR)
library(PythonInR)
pyIsConnected()
PythonInR::pyImport(import = "os")
install.packages(c("archivist", "BH", "bookdown", "chron", "colorspace", "ctmm", "curl", "data.table", "DEoptimR", "git2r", "githubinstall", "Hmisc", "hms", "knitr", "maptools", "R2BayesX", "rasterVis", "Rcpp", "RDocumentation", "revealjs", "rgdal", "rmarkdown", "robustbase", "rsconnect", "RSQLite", "secr"))
library(raster)
raster("C:/InVEST_3.3.1_x86/Base_Data/Terrestrial/lulc_samp_cur/hdr.adf")
library(PythonInR)
pyIsConnected()
library("PythonInR", lib.loc="~/R/win-library/3.3")
pyIsConnected()
autodetectPython()
autodetectPython("C:\\Python27\\python.exe")
pyConnect(pythonExePath=python)
python <- 'C:/Program Files/Anaconda3/python.exe'
pyConnect(pythonExePath=python)
remove.packages("PythonInR", lib="~/R/win-library/3.3")
install.packages("PythonInR")
library("PythonInR", lib.loc="~/R/win-library/3.3")
pyIsConnected(
)
autodetectPython("C:\\Python27\\python.exe")
python <- 'C:/Users/Marco/Downloads/WinPython-64bit-3.4.4.5Qt5/python-3.4.4.amd64/python.exe'
python <- 'C:/Users/Marco/Downloads/WinPython-64bit-3.4.4.5Qt5/python-3.4.4.amd64/python.exe'
pyIsConnected(
)
pyConnect(pythonExePath=python)
pyConnect(pythonExePath=python)
pyIsConnected()
init_landscape <- '
os.chdir(C:/Users/Marco/PhD_Cloud/7_Code/spranGalore/data/)
import nlmpy
import numpy as np
np.random.seed(0) # So that the same NLMs are produced each time
nRow = 1050        # Number of rows
nCol = 100         # Number of columns
nlm = nlmpy.mpd (nRow, nCol, h = 0.75)
'
PythonInR::pyExec(code = init_landscape)
init_landscape <- '
import os
import nlmpy
import numpy as np
np.random.seed(0) # So that the same NLMs are produced each time
nRow = 1050        # Number of rows
nCol = 100         # Number of columns
nlm = nlmpy.mpd (nRow, nCol, h = 0.75)
nlmpy.ex portAS CIIGrid("r aster. asc", nlm)
'
PythonInR::pyExec(code = init_landscape)
init_landscape <- '
import os
import nlmpy
import numpy as np
np.random.seed(0) # So that the same NLMs are produced each time
nRow = 1050        # Number of rows
nCol = 100         # Number of columns
nlm = nlmpy.mpd (nRow, nCol, h = 0.75)
nlmpy.exportASCIIGrid("r aster. asc", nlm)
'
PythonInR::pyExec(code = init_landscape)
pyIsConnected()
PythonInR::pyExec(code = init_landscape)
install.packages("ecomodtools")
getwd()
?knitr::knit
library(tint)
# invalidate cache when the package version changes
knitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tint'))
options(htmltools.dir.version = FALSE)
python <- 'C:/Users/Marco/Anaconda2/python.exe' # this is where in my case the python.exe is stored, if you are using Anaconda it should be similar
pyConnect(pythonExePath=python)
library(PythonInR)
python <- 'path/to/your/folder'
pyConnect(pythonExePath=python)
python <- 'C:/Users/Marco/Anaconda2/python.exe'
pyConnect(pythonExePath=python)
typeof(python)
library(PythonInR)
python <- 'C:/Users/Marco/Anaconda2/python.exe'
pyConnect(pythonExePath=python)
init_landscape <- '
import os
import nlmpy
# set up generation of landscapes
np.random.seed(1)   # set seed, so that the same NLMs are produced each time
nRow = 210          # Number of rows
nCol = 100          # Number of columns
# create midpoint-displacement array
nlmmpd = nlmpy.mpd (nRow, nCol, h = 0.75)
# create distance gradient array
nlmdist = np.zeros((nRow, nCol))
nlmdist[208:210, 40:60] = 1
nlmdist[9:10, 1] = 1
nlmdist = nlmpy.distanceGradient(nlmdist)
# blend mdp and distance gradient arrays
nlmmpddist = nlmpy.blendArray(nlmmpd, [nlmdist])
# classify the blended array in three classes
nlmmpddistclass = nlmpy.classifyArray(nlmmpddist, [1,1,1])
# export as ASCII grid
nlmpy.exportASCIIGrid("nlmmpddistclass.asc", nlmmpddistclass)
'
PythonInR::pyExec(code = init_landscape)
library(PythonInR)
python <- 'C:/Users/Marco/Anaconda2/python.exe'
pyConnect(pythonExePath=python)
init_landscape <- '
import os
# blend mdp and distance gradient arrays
nlmmpddist = nlmpy.blendArray(nlmmpd, [nlmdist])
# classify the blended array in three classes
nlmmpddistclass = nlmpy.classifyArray(nlmmpddist, [1,1,1])
nlmpy.exportASCIIGrid("nlmmpddistclass.asc", nlmmpddistclass)
'
PythonInR::pyExec(code = init_landscape)
#############################################################
# load packages ----
library(ggplot2)
library(rasterVis)
library(viridis)
library(raster)
library(PythonInR)
# setup python connection ----
python <- 'C:/Users/Marco/Anaconda2/python.exe'
pyConnect(pythonExePath=python)
# fn <- list.files("C:/Users/Marco/PhD_Cloud/7_Code/spranGalore/data", pattern = "nlm*")
# rs <- list.files("C:/Users/Marco/PhD_Cloud/7_Code/spranGalore/data", pattern = "raster*")
# file.remove(fn)
# file.remove(rs)
# create object containing the python code to create neutral landscapes ----
init_landscape <- '
import os
os.chdir("path/to/your/folder")
import nlmpy
import numpy as np
# set up generation of landscapes
np.random.seed(1)   # set seed, so that the same NLMs are produced each time
nRow = 210          # Number of rows
nCol = 100          # Number of columns
# create midpoint-displacement array
nlmmpd = nlmpy.mpd (nRow, nCol, h = 0.75)
# create distance gradient array
nlmdist = np.zeros((nRow, nCol))
nlmdist[208:210, 40:60] = 1
nlmdist[9:10, 1] = 1
nlmdist = nlmpy.distanceGradient(nlmdist)
# blend mdp and distance gradient arrays
nlmmpddist = nlmpy.blendArray(nlmmpd, [nlmdist])
# classify the blended array in three classes
nlmmpddistclass = nlmpy.classifyArray(nlmmpddist, [1,1,1])
# export as ASCII grid
nlmpy.exportASCIIGrid("nlmmpddistclass.asc", nlmmpddistclass)
'
# execute python code to create neutral landscapes ----
PythonInR::pyExec(code = init_landscape)
# import raster from nlmpy ----
mpd.raster <- raster("C:/Users/Marco/PhD_Cloud/7_Code/spranGalore/data/raster.asc")
# nlmmpddist <- raster("C:/Users/Marco/P
library(PythonInR)
python <- 'C:/Users/Marco/Anaconda2/python.exe'
pyConnect(pythonExePath=python)
init_landscape <- '
import os
os.chdir("C:/Users/Marco/PhD_Cloud/5_SideProjects/R-Tutorials/data/nlmpy_tut")
import nlmpy
import numpy as np
# set up generation of landscapes
nRow = 210          # Number of rows
nCol = 100          # Number of columns
nlmmpd = nlmpy.mpd (nRow, nCol, h = 0.75)
# create distance gradient array
nlmdist[208:210, 40:60] = 1
nlmdist = nlmpy.distanceGradient(nlmdist)
# blend mdp and distance gradient arrays
# classify the blended array in three classes
nlmmpddistclass = nlmpy.classifyArray(nlmmpddist, [1,1,1])
# export as ASCII grid
nlmpy.exportASCIIGrid("nlmmpddistclass.asc", nlmmpddistclass)
# create midpoint-displacement array
nlmdist[9:10, 1] = 1
nlmmpddist = nlmpy.blendArray(nlmmpd, [nlmdist])
nlmdist = np.zeros((nRow, nCol))
np.random.seed(1)   # set seed, so that the same NLMs are produced each time
'
PythonInR::pyExec(code = init_landscape)
# create object containing the python code to create neutral landscapes ----
init_landscape <- '
import os
os.chdir("C:/Users/Marco/PhD_Cloud/5_SideProjects/R-Tutorials/nlmpy_tut/data")
import nlmpy
import numpy as np
# set up generation of landscapes
np.random.seed(1)   # set seed, so that the same NLMs are produced each time
nRow = 210          # Number of rows
nCol = 100          # Number of columns
# create midpoint-displacement array
nlmmpd = nlmpy.mpd (nRow, nCol, h = 0.75)
# create distance gradient array
nlmdist = np.zeros((nRow, nCol))
nlmdist[208:210, 40:60] = 1
nlmdist[9:10, 1] = 1
nlmdist = nlmpy.distanceGradient(nlmdist)
# blend mdp and distance gradient arrays
nlmmpddist = nlmpy.blendArray(nlmmpd, [nlmdist])
# classify the blended array in three classes
nlmmpddistclass = nlmpy.classifyArray(nlmmpddist, [1,1,1])
# export as ASCII grid
nlmpy.exportASCIIGrid("nlmmpddistclass.asc", nlmmpddistclass)
'
# execute python code to create neutral landscapes ----
PythonInR::pyExec(code = init_landscape)
library(ggplot2)
library(rasterVis)
library(viridis)
library(raster)
mpd.raster <- raster('C:/Users/Marco/PhD_Cloud/5_SideProjects/R-Tutorials/nlmpy_tut/data/nlmmpddistclass.asc')
gplot(mpd.raster) + geom_tile(aes(fill = value)) +
coord_equal() +
scale_fill_viridis() +
theme_void()
map<- fortify(mpd.raster)
